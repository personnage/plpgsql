-- —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É

-- docker run -d -p 5432:5432 postgres
drop table if exists test;
create table if not exists test(
    id serial primary key,
    title text not null,
    class_id int default 0,
    reference_id int default 0,
    created_at timestamp not null
);

-- –°–æ–∑–¥–∞–¥–∏–º –æ–ø–µ—Ä–∞—Ü–∏—é
insert into test(title, created_at) values('Test operations 1', now());
insert into test(title, created_at) values('Test operations 2', now());
insert into test(title, created_at) values('Test operations 3', now());

-- –í—ã–ø–æ–ª–Ω–∏–º —Å—Ç–æ—Ä–Ω–æ...
insert into test(title, class_id, reference_id, created_at)
    values('Storno test operations 1', 8, 1, now());
-- –í—ã–ø–æ–ª–Ω–∏–º —Å—Ç–æ—Ä–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ...
insert into test(title, class_id, reference_id, created_at)
    values('Storno test operations 2', 8, 1, now());

-- –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–ø—Ä–µ–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–∞, —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π.


-- alter table t add exclude (class_id with = , reference_id with =) where (class_id = 8);

insert into test(title, class_id, reference_id, created_at)
    values('Other test operations 1', 4, 1, now());
insert into test(title, class_id, reference_id, created_at)
    values('Other test operations 2', 4, 1, now());


-- –ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
-- –õ–∏–º–∏—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –Ω–µ–ª—å–∑—è, —Ç–∞–∫ –∫–∞–∫ –∏–º–µ–µ–º –±–æ–ª–µ–µ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.

DROP FUNCTION IF EXISTS strono_first_or_create(p_id int);

-- Fetch "storn" operation by reference_id.
CREATE OR REPLACE FUNCTION strono_first_or_create(p_id int)
RETURNS SETOF test AS $$
BEGIN
    RETURN QUERY
    SELECT * FROM test t WHERE t.class_id = 8 AND t.reference_id = p_id;
END;
$$ LANGUAGE plpgsql;

-- select * from strono_first_or_create(1);

DROP FUNCTION IF EXISTS strono_first_or_create(p_id int, p_title text, created_at timestamp);

-- Create "storn" operation by given parametrs.
-- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π p_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è id
-- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π p_id –¥–ª—è id –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç class_id = 8
-- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å–æ–∑–¥–∞–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.

CREATE OR REPLACE FUNCTION strono_first_or_create(
    p_id integer, p_title text, p_created_at timestamp DEFAULT now()
) RETURNS void AS $$
DECLARE
    o_id integer;
    o_class_id integer;
BEGIN
    -- Verify that the identifier transmitted correctly.
    SELECT t.class_id INTO o_class_id FROM test t WHERE t.id = p_id FOR SHARE;

    IF o_class_id IS NULL OR o_class_id = 8 THEN
        -- üò¢
        RAISE EXCEPTION 'Operation (#%) can not be found or is not allowed!', p_id;
    END IF;

    -- Determine whether the operation has been performed earlier.
    SELECT t.id INTO o_id
        FROM test t
            WHERE t.class_id = 8 AND t.reference_id = p_id FOR SHARE;

    IF o_id IS NOT NULL THEN
        -- üò¢
        RAISE EXCEPTION 'Processed operation (#%) already exists!', p_id;
    END IF;

    INSERT INTO test(class_id, title, reference_id, created_at) VALUES(
        8, p_title, p_id, p_created_at
    ) RETURNING test.id INTO o_id;

    -- RETURN;

    -- RETURN QUERY SELECT * FROM strono_first_or_create(z_id);
END;
$$ LANGUAGE plpgsql;

-- select * from strono_first_or_create(1, 'Lorem ipsum...');
